FIND_PACKAGE(PkgConfig REQUIRED)

PKG_CHECK_MODULES(PIXMAN REQUIRED pixman-1)
INCLUDE_DIRECTORIES(${PIXMAN_INCLUDE_DIRS})
LINK_DIRECTORIES(${PIXMAN_LIBRARY_DIRS})

PKG_CHECK_MODULES(FREETYPE REQUIRED freetype2)
INCLUDE_DIRECTORIES(${FREETYPE_INCLUDE_DIRS})
LINK_DIRECTORIES(${FREETYPE_LIBRARY_DIRS})

PKG_CHECK_MODULES(HARFBUZZ REQUIRED harfbuzz)
INCLUDE_DIRECTORIES(${HARFBUZZ_INCLUDE_DIRS})
LINK_DIRECTORIES(${HARFBUZZ_LIBRARY_DIRS})

PKG_CHECK_MODULES(FONTCONFIG REQUIRED fontconfig)
INCLUDE_DIRECTORIES(${FONTCONFIG_INCLUDE_DIRS})
LINK_DIRECTORIES(${FONTCONFIG_LIBRARY_DIRS})

PKG_CHECK_MODULES(LIBPNG REQUIRED libpng)
INCLUDE_DIRECTORIES(${LIBPNG_INCLUDE_DIRS})
LINK_DIRECTORIES(${LIBPNG_LIBRARY_DIRS})

PKG_CHECK_MODULES(LIBJPEG REQUIRED libjpeg)
INCLUDE_DIRECTORIES(${LIBJPEG_INCLUDE_DIRS})
LINK_DIRECTORIES(${LIBJPEG_LIBRARY_DIRS})

PKG_CHECK_MODULES(EXPAT REQUIRED expat)
INCLUDE_DIRECTORIES(${EXPAT_INCLUDE_DIRS})
LINK_DIRECTORIES(${EXPAT_LIBRARY_DIRS})

PKG_CHECK_MODULES(LIBCURL REQUIRED libcurl)
INCLUDE_DIRECTORIES(${LIBCURL_INCLUDE_DIRS})
LINK_DIRECTORIES(${LIBCURL_LIBRARY_DIRS})

PKG_CHECK_MODULES(JSON REQUIRED json-c)
INCLUDE_DIRECTORIES(${JSON_INCLUDE_DIRS})
LINK_DIRECTORIES(${JSON_LIBRARY_DIRS})

PKG_CHECK_MODULES(UUID REQUIRED uuid)
INCLUDE_DIRECTORIES(${UUID_INCLUDE_DIRS})
LINK_DIRECTORIES(${UUID_LIBRARY_DIRS})

PKG_CHECK_MODULES(XKBCOMMON REQUIRED xkbcommon)
INCLUDE_DIRECTORIES(${XKBCOMMON_INCLUDE_DIRS})
LINK_DIRECTORIES(${XKBCOMMON_LIBRARY_DIRS})

PKG_CHECK_MODULES(GL REQUIRED gl)
INCLUDE_DIRECTORIES(${GL_INCLUDE_DIRS})
LINK_DIRECTORIES(${GL_LIBRARY_DIRS})

PKG_CHECK_MODULES(EGL REQUIRED egl)
INCLUDE_DIRECTORIES(${EGL_INCLUDE_DIRS})
LINK_DIRECTORIES(${EGL_LIBRARY_DIRS})

option(WITH_WAYLANDSHELL "Build with WAYLANDSHELL" ON)
option(WITH_XDGSHELL "Build with XDGSHELL" ON)
option(WITH_FULLSCREEN "Build with FULLSCREEN" ON)

include(wayland)

wayland_add_protocol_server(PROTOCOLS
	${CMAKE_SOURCE_DIR}/protocol/xdg-shell.xml
	xdg-shell
	)

wayland_add_protocol_server(PROTOCOLS
	${CMAKE_SOURCE_DIR}/protocol/nemo-shell.xml
	nemo-shell
	)

wayland_add_protocol_server(PROTOCOLS
	${CMAKE_SOURCE_DIR}/protocol/nemo-client.xml
	nemo-client
	)

include_directories(
	${CMAKE_SOURCE_DIR}/asst
	${CMAKE_SOURCE_DIR}/helper
	${CMAKE_SOURCE_DIR}/compz
	${CMAKE_BINARY_DIR}/compz
	${CMAKE_SOURCE_DIR}/shell
	${CMAKE_BINARY_DIR}/shell
	)

if(WITH_WAYLANDSHELL)
	add_definitions(-DNEMOUX_WITH_WAYLANDSHELL=1)
endif(WITH_WAYLANDSHELL)

if(WITH_XDGSHELL)
	add_definitions(-DNEMOUX_WITH_XDGSHELL=1)
endif(WITH_XDGSHELL)

if(WITH_FULLSCREEN)
	add_definitions(-DNEMOUX_WITH_FULLSCREEN=1)
endif(WITH_FULLSCREEN)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_C_FLAGS}")
set(CMAKE_LINK_FLAGS "${CMAKE_LINK_FLAGS}")

add_library(nemoshell SHARED
	shell.c
	grab.c
	busycursor.c
	move.c
	resize.c
	pick.c
	waylandshell.c
	xdgshell.c
	nemoshell.c
	nemoclient.c
	viewanimation.c
	vieweffect.c
	plugin.c
	${PROTOCOLS}
	)

TARGET_LINK_LIBRARIES(nemoshell
	m
	${PIXMAN_LIBRARIES}
	${CAIRO_LIBRARIES}
	${FREETYPE_LIBRARIES}
	${HARFBUZZ_LIBRARIES}
	${FONTCONFIG_LIBRARIES}
	${LIBPNG_LIBRARIES}
	${LIBJPEG_LIBRARIES}
	${EXPAT_LIBRARIES}
	${LIBCURL_LIBRARIES}
	${JSON_LIBRARIES}
	${UUID_LIBRARIES}
	${XKBCOMMON_LIBRARIES}
	${GL_LIBRARIES}
	${EGL_LIBRARIES}
	nemoasst
	nemohelper
	nemocompz
	)

set(NEMOSHELL_PKGCONFIG_REQUIRES "nemoasst nemohelper nemocompz")

INSTALL(TARGETS nemoshell DESTINATION lib${CMAKE_LIBRARY_SUFFIX})

set(HEADER_FILES
	${CMAKE_SOURCE_DIR}/shell/shell.h
	${CMAKE_SOURCE_DIR}/shell/grab.h
	${CMAKE_SOURCE_DIR}/shell/move.h
	${CMAKE_SOURCE_DIR}/shell/pick.h
	${CMAKE_SOURCE_DIR}/shell/viewanimation.h
	${CMAKE_SOURCE_DIR}/shell/vieweffect.h
	${CMAKE_SOURCE_DIR}/shell/plugin.h
	)

configure_file(
	nemoshell.pc.in
	nemoshell.pc
	@ONLY
	)

INSTALL(FILES ${HEADER_FILES} DESTINATION include/nemoshell)
INSTALL(FILES ${CMAKE_BINARY_DIR}/shell/nemoshell.pc DESTINATION lib${CMAKE_LIBRARY_SUFFIX}/pkgconfig)
