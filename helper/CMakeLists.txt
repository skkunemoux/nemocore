FIND_PACKAGE(PkgConfig REQUIRED)

PKG_CHECK_MODULES(PIXMAN REQUIRED pixman-1)
INCLUDE_DIRECTORIES(${PIXMAN_INCLUDE_DIRS})
LINK_DIRECTORIES(${PIXMAN_LIBRARY_DIRS})

PKG_CHECK_MODULES(FREETYPE REQUIRED freetype2)
INCLUDE_DIRECTORIES(${FREETYPE_INCLUDE_DIRS})
LINK_DIRECTORIES(${FREETYPE_LIBRARY_DIRS})

PKG_CHECK_MODULES(HARFBUZZ REQUIRED harfbuzz)
INCLUDE_DIRECTORIES(${HARFBUZZ_INCLUDE_DIRS})
LINK_DIRECTORIES(${HARFBUZZ_LIBRARY_DIRS})

PKG_CHECK_MODULES(FONTCONFIG REQUIRED fontconfig)
INCLUDE_DIRECTORIES(${FONTCONFIG_INCLUDE_DIRS})
LINK_DIRECTORIES(${FONTCONFIG_LIBRARY_DIRS})

PKG_CHECK_MODULES(LIBPNG REQUIRED libpng)
INCLUDE_DIRECTORIES(${LIBPNG_INCLUDE_DIRS})
LINK_DIRECTORIES(${LIBPNG_LIBRARY_DIRS})

PKG_CHECK_MODULES(LIBJPEG REQUIRED libjpeg)
INCLUDE_DIRECTORIES(${LIBJPEG_INCLUDE_DIRS})
LINK_DIRECTORIES(${LIBJPEG_LIBRARY_DIRS})

PKG_CHECK_MODULES(LIBRSVG2 REQUIRED librsvg-2.0)
INCLUDE_DIRECTORIES(${LIBRSVG2_INCLUDE_DIRS})
LINK_DIRECTORIES(${LIBRSVG2_LIBRARY_DIRS})

PKG_CHECK_MODULES(EXPAT REQUIRED expat)
INCLUDE_DIRECTORIES(${EXPAT_INCLUDE_DIRS})
LINK_DIRECTORIES(${EXPAT_LIBRARY_DIRS})

PKG_CHECK_MODULES(LIBCURL REQUIRED libcurl)
INCLUDE_DIRECTORIES(${LIBCURL_INCLUDE_DIRS})
LINK_DIRECTORIES(${LIBCURL_LIBRARY_DIRS})

PKG_CHECK_MODULES(JSON REQUIRED json-c)
INCLUDE_DIRECTORIES(${JSON_INCLUDE_DIRS})
LINK_DIRECTORIES(${JSON_LIBRARY_DIRS})

PKG_CHECK_MODULES(UUID REQUIRED uuid)
INCLUDE_DIRECTORIES(${UUID_INCLUDE_DIRS})
LINK_DIRECTORIES(${UUID_LIBRARY_DIRS})

PKG_CHECK_MODULES(XKBCOMMON REQUIRED xkbcommon)
INCLUDE_DIRECTORIES(${XKBCOMMON_INCLUDE_DIRS})
LINK_DIRECTORIES(${XKBCOMMON_LIBRARY_DIRS})

PKG_CHECK_MODULES(GL REQUIRED gl)
INCLUDE_DIRECTORIES(${GL_INCLUDE_DIRS})
LINK_DIRECTORIES(${GL_LIBRARY_DIRS})

PKG_CHECK_MODULES(EGL REQUIRED egl)
INCLUDE_DIRECTORIES(${EGL_INCLUDE_DIRS})
LINK_DIRECTORIES(${EGL_LIBRARY_DIRS})

include_directories(
	${CMAKE_SOURCE_DIR}/asst
	${CMAKE_SOURCE_DIR}/helper
	)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_C_FLAGS} -std=c++11")
set(CMAKE_LINK_FLAGS "${CMAKE_LINK_FLAGS}")

add_library(nemohelper SHARED
	pixmanhelper.c
	bezierhelper.c
	polyhelper.c
	codehelper.c
	utf8helper.c
	fonthelper.c
	keycodehelper.c
	colorhelper.c
	syshelper.c
	udphelper.c
	fbhelper.c
	glhelper.c
	compzhelper.c
	cliphelper.c
	ttyhelper.c
	)

TARGET_LINK_LIBRARIES(nemohelper
	m
	${PIXMAN_LIBRARIES}
	${CAIRO_LIBRARIES}
	${FREETYPE_LIBRARIES}
	${HARFBUZZ_LIBRARIES}
	${FONTCONFIG_LIBRARIES}
	${LIBPNG_LIBRARIES}
	${LIBJPEG_LIBRARIES}
	${LIBRSVG2_LIBRARIES}
	${EXPAT_LIBRARIES}
	${LIBCURL_LIBRARIES}
	${JSON_LIBRARIES}
	${UUID_LIBRARIES}
	${XKBCOMMON_LIBRARIES}
	${GL_LIBRARIES}
	${EGL_LIBRARIES}
	nemoasst
	)

set(NEMOHELPER_PKGCONFIG_REQUIRES "pixman-1 freetype2 harfbuzz fontconfig libpng gl")

INSTALL(TARGETS nemohelper DESTINATION lib${CMAKE_LIBRARY_SUFFIX})

set(HEADER_FILES
	pixmanhelper.h
	bezierhelper.h
	polyhelper.h
	codehelper.h
	utf8helper.h
	fonthelper.h
	keycodehelper.h
	colorhelper.h
	syshelper.h
	udphelper.h
	fbhelper.h
	glhelper.h
	compzhelper.h
	cliphelper.h
	ttyhelper.h
	)

configure_file(
	nemohelper.pc.in
	nemohelper.pc
	@ONLY
	)

INSTALL(FILES ${HEADER_FILES} DESTINATION include/nemohelper)
INSTALL(FILES ${CMAKE_BINARY_DIR}/helper/nemohelper.pc DESTINATION lib${CMAKE_LIBRARY_SUFFIX}/pkgconfig)
